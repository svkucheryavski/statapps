# show plots
par(mfrow = c(1, 2))
plot(x, y, col = 'blue')
contour(density, col = 'blue')
library(MASS)
# get density values
density = kde2d(x, y)
# show plots
par(mfrow = c(1, 2))
plot(x, y, col = 'blue')
contour(density, col = 'blue')
# get density values
density = kde2d(x, y)
# show plots
par(mfrow = c(1, 2))
plot(x, y, col = 'blue', main = 'Scatter plot')
contour(density, col = 'blue', main = 'Contour plot for density')
library(MASS)
# get density values
density = kde2d(x, y, 500)
# show plots
par(mfrow = c(1, 2))
plot(x, y, col = 'blue', main = 'Scatter plot')
contour(density, col = 'blue', main = 'Contour plot for density')
library(MASS)
# get density values
density = kde2d(x, y, 5)
# show plots
par(mfrow = c(1, 2))
plot(x, y, col = 'blue', main = 'Scatter plot')
contour(density, col = 'blue', main = 'Contour plot for density')
library(MASS)
# get density values
density = kde2d(x, y, 1)
# show plots
par(mfrow = c(1, 2))
plot(x, y, col = 'blue', main = 'Scatter plot')
contour(density, col = 'blue', main = 'Contour plot for density')
library(MASS)
# get density values
density = kde2d(x, y, n = 50)
# show plots
par(mfrow = c(1, 2))
plot(x, y, col = 'blue', main = 'Scatter plot')
contour(density, col = 'blue', main = 'Contour plot for density')
library(MASS)
# get density values
density = kde2d(x, y, n = 500)
# show plots
par(mfrow = c(1, 2))
plot(x, y, col = 'blue', main = 'Scatter plot')
contour(density, col = 'blue', main = 'Contour plot for density')
contour.filled(density, col = 'blue', main = 'Contour plot for density')
filled.contour(density, col = 'blue', main = 'Contour plot for density')
filled.contour(density, col = 'blue', main = 'Contour plot for density')
filled.contour(density, col = 'blue', main = 'Contour plot for density')
?filled.contour
par(mfrow = c(1, 1))
filled.contour(density, col = 'blue', main = 'Contour plot for density')
density = kde2d(x, y, n = 100)
par(mfrow = c(1, 2))
plot(x, y, col = 'blue', main = 'Scatter plot')
?filled.contour
par(mfrow = c(1, 1))
filled.contour(density, col = 'blue', main = 'Contour plot for density')
filled.contour(x, ydensity, col = 'blue', main = 'Contour plot for density')
filled.contour(x, y, density, col = 'blue', main = 'Contour plot for density')
?Sys.time
?system.time
sys.time({svd(matrix(rnorm(100000000), ncol = 100)})
sys.time(svd(matrix(rnorm(100000000), ncol = 100))
)
system.time(svd(matrix(rnorm(100000000), ncol = 100))
)
system.time(svd(matrix(rnorm(100000000), ncol = 100)))
y = rexp(25, rate = 1)
hist(y)
y = rexp(25, rate = 1)
hist(y, col = 'blue')
y = rexp(25, rate = 1)
hist(y, col = 'blue')
y = rexp(25, rate = 1)
hist(y, col = 'blue')
y = rexp(25, rate = 1)
hist(y, col = 'blue')
y = rexp(25, rate = 1)
hist(y, col = 'blue')
y = rexp(25, rate = 1)
hist(y, col = 'blue')
y = rexp(25, rate = 1)
hist(y, col = 'blue')
y = rexp(25, rate = 1)
hist(y, col = 'blue')
y = rexp(25, rate = 1)
hist(y, col = 'blue')
y = rexp(25000, rate = 1)
hist(y, col = 'blue')
y = rexp(25000, rate = 1)
hist(y, col = 'blue')
y = rexp(25000, rate = 1)
hist(y, col = 'blue')
y = rexp(25000, rate = 1)
hist(y, col = 'blue')
y = rexp(25000, rate = 1)
hist(y, col = 'blue')
y = rexp(25000, rate = 1)
hist(y, col = 'blue')
y = rexp(25000, rate = 1)
hist(y, col = 'blue')
y = rexp(25000, rate = 1)
hist(y, col = 'blue')
y = rexp(25000, rate = 1)
hist(y, col = 'blue')
y = rexp(25000, rate = 1)
hist(y, col = 'blue')
y = rexp(25000, rate = 1)
hist(y, col = 'blue')
mean(y)
y = rexp(25000, rate = 1)
hist(y, col = 'blue')
mean(y)
y = rexp(25000, rate = 1)
hist(y, col = 'blue')
mean(y)
y = rexp(25000, rate = 1)
hist(y, col = 'blue')
mean(y)
y = rexp(25000, rate = 1)
hist(y, col = 'blue')
mean(y)
y = rexp(25000, rate = 1)
hist(y, col = 'blue')
mean(y)
y = rexp(25000, rate = 1)
hist(y, col = 'blue')
mean(y)
y = rexp(25000, rate = 1)
hist(y, col = 'blue')
mean(y)
y = rexp(25000, rate = 1)
hist(y, col = 'blue')
mean(y)
y = rexp(25000, rate = 1)
hist(y, col = 'blue')
mean(y)
y = rexp(25, rate = 1)
hist(y, col = 'blue')
mean(y)
y = rexp(25, rate = 1)
hist(y, col = 'blue')
mean(y)
y = rexp(25, rate = 1)
hist(y, col = 'blue')
mean(y)
y = rexp(25, rate = 1)
hist(y, col = 'blue')
mean(y)
y = rexp(25, rate = 1)
hist(y, col = 'blue')
mean(y)
yp = replicate(1000, rexp(25, rate = 1))
ymeans = apply(yp, 2, mean)
hist(ymeans)
y = runif(25000, rate = 1)
hist(y, col = 'blue')
y = runif(25000)
hist(y, col = 'blue')
y = runif(25000)
hist(y, col = 'blue')
y = runif(25000)
hist(y, col = 'blue')
y = runif(25000)
hist(y, col = 'blue')
y = runif(25000)
hist(y, col = 'blue')
y = runif(25000)
hist(y, col = 'blue')
y = runif(25000)
hist(y, col = 'blue')
y = runif(25000)
hist(y, col = 'blue')
y = runif(25000)
hist(y, col = 'blue')
y = runif(25000)
hist(y, col = 'blue')
y = runif(25000)
hist(y, col = 'blue')
y = runif(25000)
hist(y, col = 'blue')
yp = replicate(1000, runif(25))
ymeans = apply(yp, 2, mean)
hist(ymeans)
y = rexp(25, rate = 1)
hist(y, col = 'blue')
mean(y)
yp = replicate(1000, rexp(25, rate = 1))
ymeans = colMeans(yp)
hist(ymeans)
y = rexp(25, rate = 1)
hist(y, col = 'blue')
mean(y)
yp = replicate(1000, rexp(25, rate = 1))
ymeans = colMeans(yp)
hist(ymeans)
y = rexp(25, rate = 1)
hist(y, col = 'blue')
mean(y)
yp = replicate(10000, rexp(25, rate = 1))
ymeans = colMeans(yp)
hist(ymeans)
y = rexp(25, rate = 1)
hist(y, col = 'blue')
mean(y)
yp = replicate(10000, rexp(25, rate = 1))
ymeans = colMeans(yp)
hist(ymeans)
y = rexp(25, rate = 1)
hist(y, col = 'blue')
mean(y)
yp = replicate(10000, rexp(25, rate = 1))
ymeans = colMeans(yp)
hist(ymeans)
y = rexp(25, rate = 1)
hist(y, col = 'blue')
mean(y)
yp = replicate(10000, rexp(25, rate = 1))
ymeans = colMeans(yp)
hist(ymeans, breaks = 40)
hist(ymeans, breaks = 4)
hist(ymeans, breaks = 7)
hist(ymeans, breaks = 71)
hist(ymeans, breaks = 40)
s = sd(y_bar)
y = rexp(25, rate = 1)
hist(y, col = 'blue')
mean(y)
y_bar = replicate(10000, rexp(25, rate = 1))
ymeans = colMeans(y_bar)
hist(ymeans, breaks = 40)
m = mean(y_bar)
s = sd(y_bar)
show(c(m, s))
z = pnorm(0.25, m, s)
z
?pnorm
z = qnorm(0.25, m, s)
z
y = rexp(25, rate = 1)
hist(y, col = 'blue')
mean(y)
y_bar = replicate(10000, rexp(25, rate = 1))
ymeans = colMeans(y_bar)
hist(ymeans, breaks = 40)
m = mean(y_bar)
s = sd(y_bar)
show(c(m, s))
z = qnorm(0.25, m, s)
Q1 = m - z * s
show(Q1)
y = rexp(25, rate = 1)
hist(y, col = 'blue')
mean(y)
y_bar = replicate(10000, rexp(25, rate = 1))
ymeans = colMeans(y_bar)
hist(ymeans, breaks = 40)
m = mean(y_bar)
s = sd(y_bar)
show(c(m, s))
z = qnorm(0.25, m, s)
Q1 = m - z * s
show(Q1)
y = rexp(25, rate = 1)
hist(y, col = 'blue')
mean(y)
y = replicate(10000, rexp(25, rate = 1))
y_bar = colMeans(y)
hist(y_bar, breaks = 40)
m = mean(y_bar)
s = sd(y_bar)
show(c(m, s))
z = qnorm(0.25, m, s)
Q1 = m - z * s
show(Q1)
y = rexp(25, rate = 1)
hist(y, col = 'blue')
mean(y)
y = replicate(10000, rexp(25, rate = 1))
y_bar = colMeans(y)
hist(y_bar, breaks = 40)
m = mean(y_bar)
s = sd(y_bar)
show(c(m, s))
z = qnorm(0.25)
Q1 = m - z * s
show(Q1)
z
y = rexp(25, rate = 1)
hist(y, col = 'blue')
mean(y)
y = replicate(10000, rexp(25, rate = 1))
y_bar = colMeans(y)
hist(y_bar, breaks = 40)
m = mean(y_bar)
s = sd(y_bar)
show(c(m, s))
z = qnorm(0.25)
Q1 = m + z * s
show(Q1)
quantile(y_bar, 0.25)
libary(people)
library(mdatools)
data(people)
show(people)
show(people)
show(people)
show(people)
show(people)
m = pca(people)
summary( )
summary( m)
plot(x, F, type = 'b')
x = c(46, 52, 58, 64, 70, 76)
x = x + 3
F = c(0.1, 0.4, 0.6, 0.9, 1.0)
plot(x, F, type = 'b')
x = c(46, 52, 58, 64, 70, 76)
x = x + 3
F = c(0, 0.1, 0.4, 0.6, 0.9, 1.0)
plot(x, F, type = 'b')
plot(x, F, type = 'b', xlab = 'X, mg/L', ylab = 'Cumulative frequency, F', col = 'blue')
grid()
plot(x, F, type = 'b', xlab = 'X, mg/L', ylab = 'Cumulative frequency, F', col = 'blue', pch = 16)
grid()
x = c(46, 52, 58, 64, 70, 76)
x = x + 3
F = c(0, 0.1, 0.4, 0.6, 0.9, 1.0)
plot(x, F, type = 'b', xlab = 'X, mg/L', ylab = 'Cumulative frequency, F', col = 'blue', pch = 16)
grid()
abline(h = 1, lty = 2, col = 'gray')
x = c(46, 52, 58, 64, 70, 76)
x = x + 3
F = c(0, 0.1, 0.4, 0.6, 0.9, 1.0)
plot(x, F, type = 'b', xlab = 'X, mg/L', ylab = 'Cumulative frequency, F', col = 'blue', pch = 16)
grid()
abline(h = 1, lty = 2, col = 'gray')
abline(h = 0, lty = 2, col = 'gray')
shiny::runApp('Documents/Teaching/Courses/Applied statistic/Shiny/b101')
setwd("~/Documents/Teaching/Courses/Applied statistic/Shiny/B102")
# Define server logic required to draw a histogram
server <- function(input, output, session) {
n = 500
a = 40
b = 120
output$resPlot = renderPlot({
x = seq(a, b, len = n)
p = seq(0.00001, 0.999999, len = n)
pdf = dunif(x, a, b)
cdf = punif(x, a, b)
icdf = qunif(p, a, b)
x.l = NULL
y.l = NULL
x.r = NULL
y.r = NULL
x.p = NULL
y.p = NULL
if (input$type == 'cv') {
x.p = input$vone
p.p = punif(x.p, a, b)
} else if (input$type == 'ci') {
x.l = input$vleft
x.r = input$vright
p.l = punif(x.l, a, b)
p.r = punif(x.r, a, b)
} else if (input$type == 'cv') {
p.p = input$pone
x.p = qunif(p.p, a, b)
} else if (input$type == 'cv') {
p.l = input$pleft
p.r = input$pright
x.l = punif(p.l, a, b)
x.r = punif(p.r, a, b)
}
# PDF
par(mar = c(22, 5, 2, 2), cex = 0.8)
plot(x, pdf, col = 'blue', type = 'l', ylab = 'f(x)', xlab = 'Weight, kg')
polygon(c(x[1], x, x[n]), c(0.008, pdf, 0.008), col = '#f8f8f8', border = NA)
if (!is.null(x.p) && !is.null(p.p)) {
ind = x < x.p
last = ind[length(ind)]
polygon(c(x[1], x[ind], x[last]), c(0.008, pdf[ind], 0.008), col = '#fff0f0', border = NA)
lines(c(x.p, x.p), c(0, dunif(x.p, a, b)), col = 'red')
points(c(x.p, x.p), c(0, dunif(x.p, a, b)), col = 'red', pch = 16)
}
# CDF
par(new = TRUE, cex = 0.8, mar = c(5, 5, 19, 30))
plot(x, cdf, type = 'l', col = 'blue', xlab = 'Weight, kg', ylab = 'F(x)')
grid()
# ICDF
par(new = TRUE, cex = 0.8, mar = c(5, 30, 19, 2))
plot(p, icdf, type = 'l', col = 'blue', xlab = 'Weight, kg', ylab = 'F(x)')
grid()
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
text(x.p, y.p, x.p, pos = 3, cex = 0.85, col = '#707070')
text(x.p, y.p, x.p, pos = 3, cex = 0.85, col = '#707070')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot(x, pdf, col = 'blue', type = 'l', ylab = 'f(x)', xlab = 'Weight, kg', ylim = c(0, 0.02))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?parse
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plotOutput
runApp()
runApp()
runApp()
?par
par('mar')/par('mai')
par('mai')/par('mar')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/Teaching/Courses/Applied statistic/Shiny/B101')
runApp('~/Documents/Teaching/Courses/Applied statistic/Shiny/B101')
runApp('~/Documents/Teaching/Courses/Applied statistic/Shiny/B101')
runApp('~/Documents/Teaching/Courses/Applied statistic/Shiny/statapps/B103')
runApp('~/Documents/Teaching/Courses/Applied statistic/Shiny/statapps/B103')
runApp('~/Documents/Teaching/Courses/Applied statistic/Shiny/statapps/B103')
runApp('~/Documents/Teaching/Courses/Applied statistic/Shiny/statapps/B103')
runApp('~/Documents/Teaching/Courses/Applied statistic/Shiny/statapps/B103')
runApp('~/Documents/Teaching/Courses/Applied statistic/Shiny/statapps/B103')
runApp('~/Documents/Teaching/Courses/Applied statistic/Shiny/statapps/B103')
runApp('~/Documents/Teaching/Courses/Applied statistic/Shiny/statapps/B103')
runApp('~/Documents/Teaching/Courses/Applied statistic/Shiny/statapps/B103')
runApp('~/Documents/Teaching/Courses/Applied statistic/Shiny/statapps/B103')
runApp('~/Documents/Teaching/Courses/Applied statistic/Shiny/statapps/B103')
